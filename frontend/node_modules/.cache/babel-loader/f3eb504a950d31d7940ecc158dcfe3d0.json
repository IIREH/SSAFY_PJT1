{"ast":null,"code":"var _jsxFileName = \"E:\\\\SSAFY\\\\python\\\\\\uACF5\\uD1B5\\uD504\\uB85C\\uC81D\\uD2B8\\\\\\uACF5\\uD1B5\\uD504\\uB85C\\uC81D\\uD2B8 \\uC11C\\uBE0C2\\\\S06P12C208\\\\frontend\\\\src\\\\containers\\\\auth\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(_ref => {\n    let {\n      auth,\n      user\n    } = _ref;\n    return {\n      form: auth.register,\n      auth: auth.auth,\n      authError: auth.authError,\n      user: user.user\n    };\n  });\n  const navigate = useNavigate(); // 인풋 변경 이벤트 핸들러\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  }; // 폼 등록 이벤트 핸들러\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form; // 하나라도 비어있다면\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    } // 비밀번호가 일치하지 않는다면\n\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  }; // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]); // 회원가입 성공 / 실패 처리\n\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      } // 기타 이유\n\n\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]); // user 값이 잘 설정되었는지 확인\n\n  useEffect(() => {\n    if (user) {\n      navigate('/'); // 홈 화면으로 이동\n\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [navigate, user]);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"J0pe4RFnLPcAsgEchQav/+BRnDc=\", false, function () {\n  return [useDispatch, useSelector, useNavigate];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["E:/SSAFY/python/공통프로젝트/공통프로젝트 서브2/S06P12C208/frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","useNavigate","RegisterForm","error","setError","dispatch","form","auth","authError","user","navigate","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RegisterForm = () => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  const navigate = useNavigate();\r\n\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      navigate('/'); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [navigate, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}